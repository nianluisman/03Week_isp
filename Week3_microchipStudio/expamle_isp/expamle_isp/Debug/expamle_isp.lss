
expamle_isp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800100  00800100  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b25  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c9  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000440  00000000  00000000  000016ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00001af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000470  00000000  00000000  000020ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000255f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 31       	cpi	r26, 0x15	; 21
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  88:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Init>:
// function to initialize UART
void USART_Init(void)
{
	
	// Set baud rate:
	UBRR0=103;                 //UBRR= Fosc /(16*9600) -1 =103.166= 103
  90:	87 e6       	ldi	r24, 0x67	; 103
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  98:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// enable receiver and transmitter
	UCSR0B |=(1<<RXEN0 |(1 <<TXEN0));
  9c:	e1 ec       	ldi	r30, 0xC1	; 193
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 61       	ori	r24, 0x18	; 24
  a4:	80 83       	st	Z, r24

	// Set frame format : 8 data 2 stop bit

	UCSR0C = (1<<USBS0 )|(3<<UCSZ00);
  a6:	8e e0       	ldi	r24, 0x0E	; 14
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ac:	08 95       	ret

000000ae <init>:
    }
}

void init()
{
	USART_Init();
  ae:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	/* Set SS, MOSI and SCK output, all others input */
	DDRB = (1<<SS)|(1<<MOSI)|(1<<SCK)|(1 << PORTB1);
  b2:	8e e2       	ldi	r24, 0x2E	; 46
  b4:	84 b9       	out	0x04, r24	; 4
	/* LED PIN */ 
	DDRB |= (1 << PORTB0);
  b6:	84 b1       	in	r24, 0x04	; 4
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	84 b9       	out	0x04, r24	; 4
	/* Set TXD as an output */
	DDRD = (1 << TXD);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	8a b9       	out	0x0a, r24	; 10
	
	/* Set the slave select pin (Active low) */ 
	DISABLE_SS;
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	85 b9       	out	0x05, r24	; 5
	DISABLE_SS2;
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 b9       	out	0x05, r24	; 5
	
	/* Enable SPI, Master, set clock rate fosc/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  cc:	81 e5       	ldi	r24, 0x51	; 81
  ce:	8c bd       	out	0x2c, r24	; 44
  d0:	08 95       	ret

000000d2 <USART_Transmit>:
}

void USART_Transmit( uint16_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  d2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d6:	95 ff       	sbrs	r25, 5
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  de:	08 95       	ret

000000e0 <__vector_18>:
#define MCP3201_LSB_MASK (0xFE) // The definition of the mask used for the LSB byte of the MCP3201 chip.
#define MCP3201_LSB_SHIFT (0x01) // The definition of the number used for shifting the LSB byte of the MCP3201 chip.
#define MCP3201_MSB_SHIFT (0x07) // The definition of the number used for shifting the MSB byte of the MCP3201 chip.

ISR(USART_RX_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	RX_buf[RX_index++] = UDR0;
 102:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	e1 e0       	ldi	r30, 0x01	; 1
 108:	ea 0f       	add	r30, r26
 10a:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 114:	a5 5f       	subi	r26, 0xF5	; 245
 116:	be 4f       	sbci	r27, 0xFE	; 254
 118:	8c 93       	st	X, r24
	USART_Transmit(RX_buf[RX_index-1]);
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	e6 5f       	subi	r30, 0xF6	; 246
 11e:	fe 4f       	sbci	r31, 0xFE	; 254
 120:	80 81       	ld	r24, Z
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_Transmit>
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <spi_tranceiver>:

/* spi data buffer load and send */
uint8_t spi_tranceiver (uint16_t data)
{
	// Load data into the buffer
	SPDR = data;
 14a:	8e bd       	out	0x2e, r24	; 46
	
	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
 14c:	0d b4       	in	r0, 0x2d	; 45
 14e:	07 fe       	sbrs	r0, 7
 150:	fd cf       	rjmp	.-6      	; 0x14c <spi_tranceiver+0x2>
	
	// Return received data
	return(SPDR);
 152:	8e b5       	in	r24, 0x2e	; 46
}
 154:	08 95       	ret

00000156 <IOEXP_IODIR>:



/* IO expander data direction set */
void IOEXP_IODIR(uint16_t data)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
	uint8_t r_data = 0;
					// Make slave select go low
				ENABLE_SS;
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	8b 7f       	andi	r24, 0xFB	; 251
 160:	85 b9       	out	0x05, r24	; 5
				/* Send device address + r/w */
				spi_tranceiver((1<<6)|WRITE);
 162:	80 e4       	ldi	r24, 0x40	; 64
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 a5 00 	call	0x14a	; 0x14a <spi_tranceiver>
				/* Send command */
				spi_tranceiver(IODIR);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 a5 00 	call	0x14a	; 0x14a <spi_tranceiver>

				spi_tranceiver(data);
 172:	ce 01       	movw	r24, r28
 174:	0e 94 a5 00 	call	0x14a	; 0x14a <spi_tranceiver>
				// Make slave select go high
				DISABLE_SS;
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	84 60       	ori	r24, 0x04	; 4
 17c:	85 b9       	out	0x05, r24	; 5
				
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <IOEXP_datalatch>:


/* IO expander latch  set */
void IOEXP_datalatch(uint16_t data)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ec 01       	movw	r28, r24
	// Make slave select go low
	ENABLE_SS;
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	8b 7f       	andi	r24, 0xFB	; 251
 18e:	85 b9       	out	0x05, r24	; 5
	/* Send device address + r/w */
	spi_tranceiver((1<<6)|WRITE);
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 a5 00 	call	0x14a	; 0x14a <spi_tranceiver>
	/* Send command */
	
	spi_tranceiver(OUTP_LATCH);
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 a5 00 	call	0x14a	; 0x14a <spi_tranceiver>
	spi_tranceiver(data);
 1a0:	ce 01       	movw	r24, r28
 1a2:	0e 94 a5 00 	call	0x14a	; 0x14a <spi_tranceiver>
	// Make slave select go high
	DISABLE_SS;
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	85 b9       	out	0x05, r24	; 5
	
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <mcp3201_value>:
uint16_t mcp3201_value(void){
 1b2:	cf 93       	push	r28
	ENABLE_SS2;
 1b4:	85 b1       	in	r24, 0x05	; 5
 1b6:	8d 7f       	andi	r24, 0xFD	; 253
 1b8:	85 b9       	out	0x05, r24	; 5
	
	uint8_t msb_value = spi_tranceiver(0x00);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 a5 00 	call	0x14a	; 0x14a <spi_tranceiver>
 1c2:	c8 2f       	mov	r28, r24
	uint8_t lsb_value = spi_tranceiver(0x00);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 a5 00 	call	0x14a	; 0x14a <spi_tranceiver>
	
	DISABLE_SS2;
 1cc:	95 b1       	in	r25, 0x05	; 5
 1ce:	92 60       	ori	r25, 0x02	; 2
 1d0:	95 b9       	out	0x05, r25	; 5
	
	msb_value &= MCP3201_MSB_MASK;
 1d2:	cf 71       	andi	r28, 0x1F	; 31
	lsb_value = (lsb_value & MCP3201_LSB_MASK) >> MCP3201_LSB_SHIFT;
 1d4:	86 95       	lsr	r24
	
	return (msb_value << MCP3201_MSB_SHIFT) + lsb_value;
 1d6:	90 e0       	ldi	r25, 0x00	; 0
}
 1d8:	20 e8       	ldi	r18, 0x80	; 128
 1da:	c2 9f       	mul	r28, r18
 1dc:	80 0d       	add	r24, r0
 1de:	91 1d       	adc	r25, r1
 1e0:	11 24       	eor	r1, r1
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <main>:
}

int main(void)
{
	int x=0;
	init();
 1e6:	0e 94 57 00 	call	0xae	; 0xae <init>
	/* Clearing buffers */
	memset(RX_buf,0,sizeof(RX_buf));
 1ea:	8a e0       	ldi	r24, 0x0A	; 10
 1ec:	eb e0       	ldi	r30, 0x0B	; 11
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	df 01       	movw	r26, r30
 1f2:	28 2f       	mov	r18, r24
 1f4:	1d 92       	st	X+, r1
 1f6:	2a 95       	dec	r18
 1f8:	e9 f7       	brne	.-6      	; 0x1f4 <main+0xe>
	memset(TX_buf,0,sizeof(TX_buf));
 1fa:	e1 e0       	ldi	r30, 0x01	; 1
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	df 01       	movw	r26, r30
 200:	1d 92       	st	X+, r1
 202:	8a 95       	dec	r24
 204:	e9 f7       	brne	.-6      	; 0x200 <main+0x1a>
	
	/* Enable interrupts */ 
	sei();
 206:	78 94       	sei
	
	/* set all pins of I/0 expander to output */
	IOEXP_IODIR(0);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 ab 00 	call	0x156	; 0x156 <IOEXP_IODIR>
	/* set lower 4 bits (leds) high*/
	IOEXP_datalatch(0x0f);
 210:	8f e0       	ldi	r24, 0x0F	; 15
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 c2 00 	call	0x184	; 0x184 <IOEXP_datalatch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	bf ef       	ldi	r27, 0xFF	; 255
 21a:	23 ed       	ldi	r18, 0xD3	; 211
 21c:	80 e3       	ldi	r24, 0x30	; 48
 21e:	b1 50       	subi	r27, 0x01	; 1
 220:	20 40       	sbci	r18, 0x00	; 0
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x38>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x42>
 228:	00 00       	nop
	_delay_ms(1000);
	/* set higher 4 bits (leds) high*/
	IOEXP_datalatch(0xf0);
 22a:	80 ef       	ldi	r24, 0xF0	; 240
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 c2 00 	call	0x184	; 0x184 <IOEXP_datalatch>
 232:	9f ef       	ldi	r25, 0xFF	; 255
 234:	a3 ed       	ldi	r26, 0xD3	; 211
 236:	b0 e3       	ldi	r27, 0x30	; 48
 238:	91 50       	subi	r25, 0x01	; 1
 23a:	a0 40       	sbci	r26, 0x00	; 0
 23c:	b0 40       	sbci	r27, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x52>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x5c>
 242:	00 00       	nop
	_delay_ms(1000);
	int16_t data = 0xaa;
   IOEXP_datalatch(data);   //set led
 244:	8a ea       	ldi	r24, 0xAA	; 170
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 c2 00 	call	0x184	; 0x184 <IOEXP_datalatch>
    while (1) 
    {	 
		data = mcp3201_value();
 24c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mcp3201_value>
 250:	ec 01       	movw	r28, r24
		map(data, 0, 4096, 0 , 256);
		
		IOEXP_datalatch(data);   //set led
 252:	0e 94 c2 00 	call	0x184	; 0x184 <IOEXP_datalatch>
		USART_Transmit(data);    // give same value to USART
 256:	ce 01       	movw	r24, r28
 258:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_Transmit>
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	81 ee       	ldi	r24, 0xE1	; 225
 260:	94 e0       	ldi	r25, 0x04	; 4
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x7c>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x86>
 26c:	00 00       	nop
 26e:	ee cf       	rjmp	.-36     	; 0x24c <main+0x66>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
